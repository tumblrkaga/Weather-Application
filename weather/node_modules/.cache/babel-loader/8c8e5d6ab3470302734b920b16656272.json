{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\weather\\\\src\\\\components\\\\CityWeather.js\";\nimport React from \"react\";\nvar API_KEY = \"82e89009629e31d94b5e0e6bc9b6533b\";\n\nvar CityWeather =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CityWeather, _React$Component);\n\n  function CityWeather() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CityWeather);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CityWeather)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var city, country, api_call, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                city = \"\";\n                country = \"\";\n                _context.next = 5;\n                return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n\n              case 5:\n                api_call = _context.sent;\n                _context.next = 8;\n                return api_call.json();\n\n              case 8:\n                data = _context.sent;\n                console.log(data);\n\n                if (city && country) {\n                  _this.setState({\n                    temperature: data.main.temp,\n                    city: data.name,\n                    country: data.sys.country,\n                    humidity: data.main.humidity,\n                    description: data.weather[0].description,\n                    error: \"\"\n                  });\n                } else {\n                  _this.setState({\n                    temperature: undefined,\n                    city: undefined,\n                    country: undefined,\n                    humidity: undefined,\n                    description: undefined,\n                    error: \"Please enter the city and the country\"\n                  });\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      activeCity: []\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var city, request, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              city = _this.props.location.state.city;\n              _context2.next = 3;\n              return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n\n            case 3:\n              request = _context2.sent;\n              _context2.next = 6;\n              return request.json();\n\n            case 6:\n              response = _context2.sent;\n              console.log(response);\n\n              _this.setState({\n                activeCity: response\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _this;\n  }\n\n  _createClass(CityWeather, [{\n    key: \"render\",\n    value: function render() {\n      var city = this.state.activeCity;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, city.name && city.sys.country && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" Location:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \" \", city.name, \", \", city.sys.country)), city.name && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \" Current Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" \", city.main.temp, \" \\xB0C \")), city.name && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \" Minimum Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" \", city.main.temp_min, \" \\xB0C \")), city.name && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \" Maximum Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" \", city.main.temp_max, \" \\xB0C \")), city.name && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \" Humidity:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \" \", city.main.humidity, \"%\")), city.name && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \" Conditions:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" \", city.weather[0].description, \" \")));\n    }\n  }]);\n\n  return CityWeather;\n}(React.Component);\n\nexport default CityWeather;","map":{"version":3,"sources":["D:\\weather\\src\\components\\CityWeather.js"],"names":["React","API_KEY","CityWeather","state","temperature","undefined","city","country","humidity","description","error","getWeather","e","preventDefault","fetch","api_call","json","data","console","log","setState","main","temp","name","sys","weather","activeCity","componentDidMount","props","location","request","response","temp_min","temp_max","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nconst API_KEY = \"82e89009629e31d94b5e0e6bc9b6533b\";\r\n\r\nclass CityWeather extends React.Component {\r\n\r\n    state = {\r\n\t\ttemperature : undefined,\r\n\t\tcity : undefined,\r\n\t\tcountry : undefined,\r\n\t\thumidity : undefined,\r\n\t\tdescription : undefined,\r\n\t\terror :undefined\r\n  }\t\r\n  \r\n  getWeather = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst city = \"\";\r\n\t\tconst country = \"\";\r\n\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n\t \tconst data = await api_call.json();\r\n\t \tconsole.log(data);\r\n\t \tif (city && country){\r\n\t \t\tthis.setState({\r\n\t \t\ttemperature : data.main.temp,\r\n\t \t\tcity : data.name,\r\n\t \t\tcountry : data.sys.country,\r\n\t\t\thumidity : data.main.humidity,\r\n\t\t\tdescription : data.weather[0].description,\r\n\t\t\terror : \"\"\r\n\r\n\t \t});\r\n\r\n\t \t} else {\r\n\t \t\tthis.setState({\r\n\t \t\ttemperature : undefined,\r\n\t \t\tcity : undefined,\r\n\t \t\tcountry : undefined,\r\n\t\t\thumidity : undefined,\r\n\t\t\tdescription : undefined,\r\n\t\t\terror : \"Please enter the city and the country\"\r\n\t\t\t});\r\n\r\n\t \t}\r\n\t \t\r\n\t}\r\n\r\n    state = {\r\n        activeCity : []\r\n    }\r\n    componentDidMount = async () =>{\r\n        const city = this.props.location.state.city;\r\n        const request = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n        const response = await request.json();\r\n        console.log(response);\r\n        this.setState({activeCity : response})\r\n    }\r\n    render(){\r\n        const city = this.state.activeCity;\r\n        return(            \r\n            <div>\r\n            {\t\r\n                city.name && city.sys.country && <p  > Location: \r\n                    <span  > { city.name }, { city.sys.country }</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                city.name && <p  > Current Temperature: \r\n                    <span  > { city.main.temp } &deg;C\t</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                city.name && <p  > Minimum Temperature: \r\n                    <span  > { city.main.temp_min } &deg;C\t</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                city.name && <p  > Maximum Temperature: \r\n                    <span  > { city.main.temp_max } &deg;C\t</span>\r\n                </p> \r\n            }\r\n            \r\n            { \t\r\n                city.name && <p  > Humidity: \r\n                    <span  > { city.main.humidity }%</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                city.name && <p  > Conditions: \r\n                    <span  > { city.weather[0].description } </span>\r\n            </p> \r\n            }\r\n            \r\n            </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default CityWeather;"]},"metadata":{},"sourceType":"module"}