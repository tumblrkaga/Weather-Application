{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\weather\\\\src\\\\components\\\\CityWeather.js\";\nimport React from \"react\";\nvar API_KEY = \"82e89009629e31d94b5e0e6bc9b6533b\";\n\nvar CityWeather =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CityWeather, _React$Component);\n\n  function CityWeather() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CityWeather);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CityWeather)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      lowest_temp: undefined,\n      highest_temp: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      main: undefined\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var city, api_call, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              city = _this.props.location.state.city;\n              _context.next = 3;\n              return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n\n            case 3:\n              api_call = _context.sent;\n              _context.next = 6;\n              return api_call.json();\n\n            case 6:\n              data = _context.sent;\n              console.log(data);\n\n              if (city) {\n                _this.setState({\n                  temperature: data.main.temp,\n                  lowest_temp: data.main.temp_min,\n                  highest_temp: data.main.temp_max,\n                  city: data.name,\n                  country: data.sys.country,\n                  humidity: data.main.humidity,\n                  description: data.weather[0].description,\n                  main: data.weather[0].main\n                });\n              } else {\n                _this.setState({\n                  temperature: undefined,\n                  lowest_temp: undefined,\n                  highest_temp: undefined,\n                  city: undefined,\n                  country: undefined,\n                  humidity: undefined,\n                  description: undefined,\n                  main: undefined\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _this;\n  }\n\n  _createClass(CityWeather, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.state.city && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \" Location:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \" \", this.state.city, \", \", this.state.country)), this.state.temperature && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \" Current Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \" \", this.state.temperature, \" \\xB0C \")), this.state.lowest_temp && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \" Minimum Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" \", this.state.lowest_temp, \" \\xB0C \")), this.state.highest_temp && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" Maximum Temperature:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" \", this.state.highest_temp, \" \\xB0C \")), this.state.humidity && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \" Humidity:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \" \", this.state.humidity, \"%\")), this.state.description && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" Conditions:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \" \", this.state.description, \" \")));\n    }\n  }]);\n\n  return CityWeather;\n}(React.Component);\n\nexport default CityWeather;","map":{"version":3,"sources":["D:\\weather\\src\\components\\CityWeather.js"],"names":["React","API_KEY","CityWeather","state","temperature","undefined","lowest_temp","highest_temp","city","country","humidity","description","main","componentDidMount","props","location","fetch","api_call","json","data","console","log","setState","temp","temp_min","temp_max","name","sys","weather","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nconst API_KEY = \"82e89009629e31d94b5e0e6bc9b6533b\";\r\n\r\nclass CityWeather extends React.Component {\r\n\r\n    state = {\r\n        temperature : undefined,\r\n        lowest_temp: undefined,\r\n        highest_temp: undefined,\r\n\t\tcity : undefined,\r\n\t\tcountry : undefined,\r\n\t\thumidity : undefined,\r\n\t\tdescription : undefined,\r\n\t\tmain :undefined\r\n    }\t\r\n  \r\n    componentDidMount = async () => {        \r\n        const city = this.props.location.state.city;\r\n\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n\t \tconst data = await api_call.json();\r\n\t \tconsole.log(data);\r\n\t \tif (city){\r\n\t \t\tthis.setState({\r\n            temperature : data.main.temp,\r\n            lowest_temp: data.main.temp_min,\r\n            highest_temp: data.main.temp_max,\r\n\t \t\tcity : data.name,\r\n\t \t\tcountry : data.sys.country,\r\n\t\t\thumidity : data.main.humidity,\r\n            description : data.weather[0].description,\r\n            main : data.weather[0].main\r\n\t \t});\r\n\r\n\t \t} else {\r\n\t \t\tthis.setState({\r\n            temperature : undefined,\r\n            lowest_temp: undefined,\r\n            highest_temp: undefined,\r\n\t \t\tcity : undefined,\r\n\t \t\tcountry : undefined,\r\n\t\t\thumidity : undefined,\r\n            description : undefined,\r\n            main: undefined\r\n\t\t\t});\r\n\r\n\t \t}\r\n\t \t\r\n\t}\r\n    render(){\r\n        return(            \r\n            <div>\r\n            {\t\r\n                this.state.city && <p  > Location: \r\n                    <span  > { this.state.city }, { this.state.country }</span>\r\n                </p> \r\n            }            \r\n            { \t\r\n                this.state.temperature && <p  > Current Temperature: \r\n                    <span  > { this.state.temperature} &deg;C\t</span>\r\n                </p> \r\n            }\r\n            \r\n            { \t\r\n                this.state.lowest_temp && <p  > Minimum Temperature: \r\n                    <span  > { this.state.lowest_temp } &deg;C\t</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                this.state.highest_temp && <p  > Maximum Temperature: \r\n                    <span  > { this.state.highest_temp} &deg;C\t</span>\r\n                </p> \r\n            }\r\n            \r\n            { \t\r\n                this.state.humidity && <p  > Humidity: \r\n                    <span  > { this.state.humidity }%</span>\r\n                </p> \r\n            }\r\n            { \t\r\n                this.state.description && <p  > Conditions: \r\n                    <span  > {  this.state.description} </span>\r\n            </p> \r\n            }\r\n            </div>\r\n       );\r\n    }\r\n}\r\n\r\n\r\nexport default CityWeather;"]},"metadata":{},"sourceType":"module"}